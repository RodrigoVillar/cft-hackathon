/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EscrowInterface extends ethers.utils.Interface {
  functions: {
    "createEscrowTX(address,uint256,int256,address,address,uint256,int256)": FunctionFragment;
    "getEscrow(uint256,int256)": FunctionFragment;
    "nftLocked(uint256,address)": FunctionFragment;
    "refund(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createEscrowTX",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftLocked",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createEscrowTX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEscrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftLocked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;

  events: {
    "NewEscrow(uint256)": EventFragment;
    "Refund(uint256)": EventFragment;
    "ReleaseEscrow(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewEscrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseEscrow"): EventFragment;
}

export type NewEscrowEvent = TypedEvent<[BigNumber] & { txID: BigNumber }>;

export type RefundEvent = TypedEvent<[BigNumber] & { txID: BigNumber }>;

export type ReleaseEscrowEvent = TypedEvent<[BigNumber] & { txID: BigNumber }>;

export class Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EscrowInterface;

  functions: {
    createEscrowTX(
      _nftContract1: string,
      _tokenID1: BigNumberish,
      _subnetID1: BigNumberish,
      _user2: string,
      _nftContract2: string,
      _tokenID2: BigNumberish,
      _subnet2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEscrow(
      txID: BigNumberish,
      _orderNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftLocked(
      txID: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refund(
      txID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createEscrowTX(
    _nftContract1: string,
    _tokenID1: BigNumberish,
    _subnetID1: BigNumberish,
    _user2: string,
    _nftContract2: string,
    _tokenID2: BigNumberish,
    _subnet2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEscrow(
    txID: BigNumberish,
    _orderNum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftLocked(
    txID: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refund(
    txID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createEscrowTX(
      _nftContract1: string,
      _tokenID1: BigNumberish,
      _subnetID1: BigNumberish,
      _user2: string,
      _nftContract2: string,
      _tokenID2: BigNumberish,
      _subnet2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getEscrow(
      txID: BigNumberish,
      _orderNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, boolean]>;

    nftLocked(
      txID: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(txID: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NewEscrow(uint256)"(
      txID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { txID: BigNumber }>;

    NewEscrow(
      txID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { txID: BigNumber }>;

    "Refund(uint256)"(
      txID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { txID: BigNumber }>;

    Refund(
      txID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { txID: BigNumber }>;

    "ReleaseEscrow(uint256)"(
      txID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { txID: BigNumber }>;

    ReleaseEscrow(
      txID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { txID: BigNumber }>;
  };

  estimateGas: {
    createEscrowTX(
      _nftContract1: string,
      _tokenID1: BigNumberish,
      _subnetID1: BigNumberish,
      _user2: string,
      _nftContract2: string,
      _tokenID2: BigNumberish,
      _subnet2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEscrow(
      txID: BigNumberish,
      _orderNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftLocked(
      txID: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refund(
      txID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createEscrowTX(
      _nftContract1: string,
      _tokenID1: BigNumberish,
      _subnetID1: BigNumberish,
      _user2: string,
      _nftContract2: string,
      _tokenID2: BigNumberish,
      _subnet2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEscrow(
      txID: BigNumberish,
      _orderNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftLocked(
      txID: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      txID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
